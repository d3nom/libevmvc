{
    "scopeName": "text.html.fan",
    "injections": {
        "text.html.basic - (meta.embedded | meta.tag), L:text.html.fan meta.tag, L:text.html.fan source.js L:text.html.fan source.cpp":{
            "patterns": [
                {
                    "include": "#implicit-fanjet-expression"
                }
            ]
        }
    },
    "patterns": [
        {"include": "#fanjet-line-comments"},
        {"include": "#fanjet-block-comments"},
        {"include": "#fanjet-region"},
        {"include": "#fanjet-endregion"},
        {"include": "#fanjet-directives"},
        {"include": "#fanjet-code-block"},
        {"include": "#fanjet-else-if"},
        {"include": "#fanjet-if"},
        {"include": "#fanjet-else"},
        {"include": "#fanjet-each"},
        {"include": "#fanjet-for"},
        {"include": "#explicit-fanjet-expression"},
        {"include": "#implicit-fanjet-expression"},
        {"include": "text.html.basic"}
    ],
    "repository": {
        "fanjet-line-comments": {
            "name": "comment.line.fan",
            "begin": "@\\*\\*",
            "captures": {
                "0": {
                    "name": "punctuation.definition.comment.source.cpp"
                }
            },
            "end": "$"
        },
        "fanjet-block-comments": {
            "name": "comment.block.fan",
            "begin": "@\\*",
            "captures": {
                "0": {
                    "name": "punctuation.definition.comment.source.cpp"
                }
            },
            "end": "\\*@"
        },
        
        "fanjet-region": {
            "name": "comment.line.fan",
            "begin": "@region",
            "end": "$"
        },
        "fanjet-endregion": {
            "name": "comment.line.fan",
            "begin": "@endregion",
            "end": "$"
        },
        
        "fanjet-directives": {
            "name": "meta.directive.fan",
            "patterns": [
                {"include": "#fanjet-header-directive"},
                {"include": "#using-directive"},
                {"include": "#model-directive"},
                {"include": "#inherits-directive"},
                {"include": "#inject-directive"},
                {"include": "#implements-directive"},
                {"include": "#layout-directive"},
                {"include": "#page-directive"},
                {"include": "#functions-directive"}
            ]
        },
        "explicit-fanjet-expression": {
            "name": "meta.expression.explicit.fan",
            "begin": "(@)\\(",
            "captures": {
                "0": {
                    "name": "keyword.control.fan"
                }
            },
            "patterns": [
                {
                    "include": "source.cpp"
                }
            ],
            "end": "\\)"
        },
        "implicit-fanjet-expression": {
            "name": "meta.expression.implicit.fan",
            "match": "(?<!@)(@)([a-zA-Z0-9\\.\\_\\(\\)]+)",
            "captures": {
                "0": {
                    "name": "keyword.control.fan"
                }
            }
        },
        "fanjet-header-directive": {
            "name": "meta.directive.header.fan",
            "begin": "(@header)\\s+",
            "captures": {
                "0": {"name": "keyword.control.fan"}
            },
            "patterns": [
                {
                    "include": "source.cpp"
                }
            ],
            "end": ";"
        },
        "using-directive": {
            "name": "meta.directive.using.fan",
            "begin": "(@)(?=using)(.*)",
            "captures": {
                "0": {
                    "name": "keyword.control.fan"
                },
                "2": {
                    "patterns": [
                        {
                            "include": "source.cpp"
                        }
                    ]
                }
            },
            "end": "(?=$)"
        },
        "model-directive": {
            "name": "meta.directive.model.fan",
            "begin": "(@model)\\s+",
            "captures": {
                "0": {
                    "name": "keyword.control.fan"
                }
            },
            "patterns": [
                {
                    "include": "#cpp-type-name"
                }
            ],
            "end": "$"
        },
        "inherits-directive": {
            "name": "meta.directive.inherits.fan",
            "begin": "(@inherits)\\s+",
            "captures": {
                "0": {
                    "name": "keyword.control.fan"
                }
            },
            "patterns": [
                {
                    "include": "#cpp-type-name"
                }
            ],
            "end": ";"
        },
        "inject-directive": {
            "name": "meta.directive.inject.fan",
            "begin": "(@inject)\\s+",
            "captures": {
                "0": {
                    "name": "keyword.control.fan"
                }
            },
            "patterns": [
                {
                    "include": "#cpp-type-name"
                }
            ],
            "end": "$"
        },
        "implements-directive": {
            "name": "meta.directive.implements.fan",
            "begin": "(@implements)\\s+",
            "captures": {
                "0": {
                    "name": "keyword.control.fan"
                }
            },
            "patterns": [
                {
                    "include": "#cpp-type-name"
                }
            ],
            "end": "$"
        },
        "layout-directive": {
            "name": "meta.directive.layout.fan",
            "begin": "(@layout)\\s+",
            "captures": {
                "0": {
                    "name": "keyword.control.fan"
                }
            },
            "patterns": [
                {
                    "include": "#cpp-type-name"
                }
            ],
            "end": "$"
        },
        "page-directive": {
            "name": "meta.directive.page.fan",
            "begin": "(@page)\\s+",
            "captures": {
                "0": {
                    "name": "keyword.control.fan"
                }
            },
            "patterns": [
                {
                    "include": "source.cpp"
                }
            ],
            "end": "$"
        },
        "functions-directive": {
            "name": "meta.directive.functions.fan",
            "match": "(@functions)",
            "captures": {
                "0": {
                    "name": "keyword.control.fan"
                }
            }
        },
        "fanjet-if": {
            "begin": "(@if)",
            "captures": {
                "0": {
                    "name": "keyword.control.fan"
                }
            },
            "patterns": [
                {
                    "include": "source.cpp"
                }
            ],
            "end": "$"
        },
        "fanjet-else": {
            "begin": "(else)",
            "captures": {
                "0": {
                    "name": "keyword.control.fan"
                }
            },
            "patterns": [
                {
                    "include": "source.cpp"
                }
            ],
            "end": "$"
        },
        "fanjet-else-if": {
            "begin": "(else\\s+if)",
            "captures": {
                "0": {
                    "name": "keyword.control.fan"
                }
            },
            "patterns": [
                {
                    "include": "source.cpp"
                }
            ],
            "end": "$"
        },
        "fanjet-each": {
            "begin": "(@each)\\s*\\(",
            "captures": {
                "0": {
                    "name": "keyword.control.fan"
                }
            },
            "patterns": [
                {
                    "include": "source.cpp"
                }
            ],
            "end": "\\)"
        },
        "fanjet-for": {
            "begin": "(@for)\\s*\\(",
            "captures": {
                "0": {
                    "name": "keyword.control.fan"
                }
            },
            "patterns": [
                {
                    "include": "source.cpp"
                }
            ],
            "end": "\\)"
        },
        "fanjet-code-block": {
            "begin": "(@)\\{",
            "captures": {
                "1": {
                    "name": "keyword.control.fan"
                }
            },
            "patterns": [
                {
                    "include": "source.cpp"
                }
            ],
            "end": "\\}"
        },
        "fanjet-code-block-b": {
            "begin": "@?\\{",
            "captures": {
                "0": {
                    "name": "keyword.control.fan"
                }
            },
            "patterns": [
                {
                    "name": "keyword.control.fan",
                    "begin": "<out>",
                    "end": "</out>",
                    "patterns":[
                        {"include": "$self"}
                    ]
                },
                {
                    "include": "source.cpp"
                }
            ],
            "end": "\\}"
        },
        
        "cpp-namespace-identifier": {
            "patterns": [
                {
                    "name": "entity.name.type.namespace.cpp",
                    "match": "[_[:alpha:]][_[:alnum:]]*"
                }
            ]
        },
        "cpp-type-name": {
            "patterns": [
                {
                    "match": "([_[:alpha:]][_[:alnum:]]*)\\s*(\\:\\:)",
                    "captures": {
                        "1": {
                            "name": "entity.name.type.alias.cpp"
                        },
                        "2": {
                            "name": "punctuation.separator.coloncolon.cpp"
                        }
                    }
                },
                {
                    "match": "([_[:alpha:]][_[:alnum:]]*)\\s*(\\.)",
                    "captures": {
                        "1": {
                            "name": "storage.type.cpp"
                        },
                        "2": {
                            "name": "punctuation.accessor.cpp"
                        }
                    }
                },
                {
                    "match": "(\\.)\\s*([_[:alpha:]][_[:alnum:]]*)",
                    "captures": {
                        "1": {
                            "name": "punctuation.accessor.cpp"
                        },
                        "2": {
                            "name": "storage.type.cpp"
                        }
                    }
                },
                {
                    "name": "storage.type.cpp",
                    "match": "[_[:alpha:]][_[:alnum:]]*"
                }
            ]
        }
    }
}