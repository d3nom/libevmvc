{
    "scopeName": "text.html.fan",
    "injections":{
        "L:text.html":{
            "patterns":[
                {"include": "#fanjet-markup-html"},
                {"include": "#fanjet-markup-markdown"}
            ]
        },
        "L:text.cpp":{
            "patterns":[
                {"include": "#fanjet-markup-html"},
                {"include": "#fanjet-markup-markdown"}
            ]
        }
    },
    "patterns": [
        {"include": "text.html.basic"},
        
        {"include": "#strings"},
        {"include": "#fanjet-escape"},
        {"include": "#fanjet-line-comments"},
        {"include": "#fanjet-block-comments"},
        {"include": "#fanjet-region"},
        {"include": "#fanjet-endregion"},
        
        {"include": "#fanjet-directives"},
        
        {"include": "#fanjet-for"},
        
        {"include": "#fanjet-if"},
        {"include": "#fanjet-else-if"},
        {"include": "#fanjet-else"},
        
        {"include": "#fanjet-each"},
        
        {"include": "#fanjet-markup-html"},
        {"include": "#fanjet-markup-markdown"},
        
        {"include": "#fanjet-code-block"}
    ],
    "repository": {
        "fanjet-escape": {
            "match": "@(?=@)"
        },
        "fanjet-line-comments": {
            "name": "comment.line.fan",
            "begin": "@\\*\\*",
            "captures": {
                "0": {
                    "name": "punctuation.definition.comment.source.cpp"
                }
            },
            "end": "$"
        },
        "fanjet-block-comments": {
            "name": "comment.block.fan",
            "begin": "@\\*",
            "captures": {
                "0": {
                    "name": "punctuation.definition.comment.source.cpp"
                }
            },
            "end": "\\*@"
        },
        
        "fanjet-region": {
            "name": "comment.line.fan",
            "begin": "@region",
            "end": "$"
        },
        "fanjet-endregion": {
            "name": "comment.line.fan",
            "begin": "@endregion",
            "end": "$"
        },
        
        "fanjet-directives": {
            "name": "meta.directive.fan",
            "patterns": [
                {"include": "#fanjet-header-directive"},
                {"include": "#fanjet-inherits-directive"},
                {"include": "#fanjet-layout-directive"},
                {"include": "#fanjet-h-functions-directive"},
                {"include": "#fanjet-cpp-functions-directive"}
            ]
        },

        "fanjet-header-directive": {
            "name": "meta.directive.header.fan",
            "begin": "(@header)\\s+",
            "captures": {
                "0": {"name": "keyword.control.fan"}
            },
            "patterns": [
                {
                    "include": "source.cpp"
                }
            ],
            "end": ";"
        },
        "fanjet-inherits-directive": {
            "name": "meta.directive.inherits.fan",
            "begin": "(@inherits)\\s+",
            "captures": {
                "0": {
                    "name": "keyword.control.fan"
                }
            },
            "patterns": [
                {
                    "include": "#cpp-type-name"
                }
            ],
            "end": ";"
        },
        
        "fanjet-layout-directive": {
            "name": "meta.directive.layout.fan",
            "begin": "(@layout)\\s+",
            "captures": {
                "0": {
                    "name": "keyword.control.fan"
                }
            },
            "patterns": [
                {
                    "include": "#cpp-type-name"
                }
            ],
            "end": "$"
        },
        
        "fanjet-h-functions-directive": {
            "name": "meta.directive.functions.fan",
            "begin": "(@funi).*\\{",
            "captures": {
                "1": {
                    "name": "keyword.control.fan"
                }
            },
            "patterns": [
                {
                    "include": "source.cpp"
                }
            ],
            "end": "\\}"
        },
        
        "fanjet-cpp-functions-directive": {
            "name": "meta.directive.functions.fan",
            "begin": "(@func).*\\{",
            "captures": {
                "1": {
                    "name": "keyword.control.fan"
                }
            },
            "patterns": [
                {
                    "include": "source.cpp"
                }
            ],
            "end": "\\}"
        },
        
        "fanjet-if": {
            "begin": "(@if)\\s*(\\()",
            "captures": {
                "0": {"name": "keyword.control.fan"}
            },
            "patterns": [{"include": "source.cpp"}],
            "end": "\\)"
        },
        "fanjet-else": {
            "match": "\\b(else)\\b",
            "captures": {
                "0": {
                    "name": "keyword.control.fan"
                }
            },
            "patterns": [
                {
                    "include": "source.cpp"
                }
            ]
        },
        "fanjet-else-if": {
            "begin": "(else\\s+if)\\s*(\\()",
            "captures": {
                "0": {
                    "name": "keyword.control.fan"
                }
            },
            "patterns": [
                {
                    "include": "source.cpp"
                }
            ],
            "end": "\\)"
        },
        "fanjet-each": {
            "begin": "(@each)\\s*\\(",
            "captures": {
                "0": {
                    "name": "keyword.control.fan"
                }
            },
            "patterns": [
                {
                    "include": "source.cpp"
                }
            ],
            "end": "\\)"
        },
        "fanjet-for": {
            "begin": "(@for)\\s*(\\()",
            "captures": {
                "0": {"name": "keyword.control.fan"}
            },
            "patterns": [{"include": "source.cpp"}],
            "end": "\\)"
        },
        "fanjet-code-block": {
            "begin": "@?\\{",
            "captures": {
                "0": {
                    "name": "keyword.control.fan"
                }
            },
            "patterns": [
                {"include": "text.html.fan"},
                {"include": "source.markdown"},
                {"include": "source.cpp"}
            ],
            "end": "\\}"
        },
        
        "fanjet-markup-html": {
            "begin": "(@)<(html|htm)>\\s*\\{",
            "captures": {
                "1": {"name": "keyword.control.fan"},
                "2": {"name": "keyword.control.fan"}
            },
            "patterns": [
                {
                    "include": "source.html"
                }
            ],
            "end": "\\}"
        },
        "fanjet-markup-markdown": {
            "begin": "(@)(\\()(markdown|md)(\\))\\s*\\{",
            "beginCaptures":{
                "1": {"name": "keyword.control.fan"},
                "3": {"name": "keyword.control.fan"}
            },
            "patterns": [
                {
                    "include": "source.md"
                }
            ],
            "end": "\\}",
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.tag.end.html"
                }
            }
        },
        
        
        "cpp-namespace-identifier": {
            "patterns": [
                {
                    "name": "entity.name.type.namespace.cpp",
                    "match": "[_[:alpha:]][_[:alnum:]]*"
                }
            ]
        },
        "cpp-type-name": {
            "patterns": [
                {
                    "match": "([_[:alpha:]][_[:alnum:]]*)\\s*(\\:\\:)",
                    "captures": {
                        "1": {
                            "name": "entity.name.type.alias.cpp"
                        },
                        "2": {
                            "name": "punctuation.separator.coloncolon.cpp"
                        }
                    }
                },
                {
                    "match": "([_[:alpha:]][_[:alnum:]]*)\\s*(\\.)",
                    "captures": {
                        "1": {
                            "name": "storage.type.cpp"
                        },
                        "2": {
                            "name": "punctuation.accessor.cpp"
                        }
                    }
                },
                {
                    "match": "(\\.)\\s*([_[:alpha:]][_[:alnum:]]*)",
                    "captures": {
                        "1": {
                            "name": "punctuation.accessor.cpp"
                        },
                        "2": {
                            "name": "storage.type.cpp"
                        }
                    }
                },
                {
                    "name": "storage.type.cpp",
                    "match": "[_[:alpha:]][_[:alnum:]]*"
                }
            ]
        },
        
        
        "string_placeholder-c": {
            "patterns": [
                {
                    "match": "(?x) %\n(\\d+\\$)?\t\t\t\t\t\t   # field (argument #)\n[#0\\- +']*\t\t\t\t\t\t  # flags\n[,;:_]?\t\t\t\t\t\t\t  # separator character (AltiVec)\n((-?\\d+)|\\*(-?\\d+\\$)?)?\t\t  # minimum field width\n(\\.((-?\\d+)|\\*(-?\\d+\\$)?)?)?\t# precision\n(hh|h|ll|l|j|t|z|q|L|vh|vl|v|hv|hl)? # length modifier\n[diouxXDOUeEfFgGaACcSspn%]\t\t   # conversion type",
                    "name": "constant.other.placeholder.cpp"
                }
            ]
        },
        "strings": {
            "patterns": [
                {
                    "begin": "(u|u8|U|L)?\"",
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.definition.string.begin.cpp"
                        },
                        "1": {
                            "name": "meta.encoding.cpp"
                        }
                    },
                    "end": "\"",
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.definition.string.end.cpp"
                        }
                    },
                    "name": "string.quoted.double.cpp",
                    "patterns": [
                        {
                            "match": "\\\\u\\h{4}|\\\\U\\h{8}",
                            "name": "constant.character.escape.cpp"
                        },
                        {
                            "match": "\\\\['\"?\\\\abfnrtv]",
                            "name": "constant.character.escape.cpp"
                        },
                        {
                            "match": "\\\\[0-7]{1,3}",
                            "name": "constant.character.escape.cpp"
                        },
                        {
                            "match": "\\\\x\\h+",
                            "name": "constant.character.escape.cpp"
                        },
                        {
                            "include": "#string_placeholder-c"
                        }
                    ]
                },
                {
                    "begin": "(u|u8|U|L)?R\"(?:([^ ()\\\\\\t]{0,16})|([^ ()\\\\\\t]*))\\(",
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.definition.string.begin.cpp"
                        },
                        "1": {
                            "name": "meta.encoding.cpp"
                        },
                        "3": {
                            "name": "invalid.illegal.delimiter-too-long.cpp"
                        }
                    },
                    "end": "\\)\\2(\\3)\"",
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.definition.string.end.cpp"
                        },
                        "1": {
                            "name": "invalid.illegal.delimiter-too-long.cpp"
                        }
                    },
                    "name": "string.quoted.double.raw.cpp"
                }
            ]
        }
    }
}